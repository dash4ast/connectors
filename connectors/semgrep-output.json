{"errors": [], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": ["src/connectors/__main__.py", "src/connectors/app.py", "src/connectors/db/MariaDbClient.py", "src/connectors/db/PostgreDbClient.py", "src/connectors/db/UtilDb.py", "src/connectors/db/__init__.py", "src/connectors/endpoints/__init__.py", "src/connectors/endpoints/bandit_import.py", "src/connectors/endpoints/blackduck_extractor.py", "src/connectors/endpoints/checkov_import.py", "src/connectors/endpoints/coverity_import.py", "src/connectors/endpoints/create_app.py", "src/connectors/endpoints/delete_app.py", "src/connectors/endpoints/gitlab_scans_import.py", "src/connectors/endpoints/hclscan_import.py", "src/connectors/endpoints/health.py", "src/connectors/endpoints/owaspzap_import.py", "src/connectors/endpoints/safety_import.py", "src/connectors/endpoints/semgrep_import.py", "src/connectors/endpoints/sonarqube_extractor.py", "src/connectors/persistence/Analysis.py", "src/connectors/persistence/Application.py", "src/connectors/persistence/Base.py", "src/connectors/persistence/Vulnerability.py", "src/connectors/persistence/__init__.py", "src/connectors.egg-info/PKG-INFO", "src/connectors.egg-info/SOURCES.txt", "src/connectors.egg-info/dependency_links.txt", "src/connectors.egg-info/requires.txt", "src/connectors.egg-info/top_level.txt"]}, "results": [{"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 92, "line": 131, "offset": 4284}, "extra": {"fingerprint": "e6c00bfecb24d4f9f3cf8f5748d099ad3545be842005579cb1b26cc3ba2ea9f012d2d3e946cb63f71c5bc189b670d528fffd5ed72a55e5a594c6ff54b6be9f21_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['test_id']+issue['filename']\n                                                     + str(issue['line_number'])).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/bandit_import.py", "start": {"col": 38, "line": 130, "offset": 4142}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 95, "line": 211, "offset": 9018}, "extra": {"fingerprint": "e04fbe818737280417e23f8c42ae5bcac22100c82b560fdca2467d5fae475ed5d3eb1a01e98a066f85bde447718221c8c40404413412347fd80b548769c82927_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    key = hashlib.md5(\n        str(issue_name + component_name + component_version_name + application_name).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/blackduck_extractor.py", "start": {"col": 11, "line": 210, "offset": 8911}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 105, "line": 134, "offset": 4462}, "extra": {"fingerprint": "f48370d2fcea007bef48880c316c1889b35efe3e7b9984aebee12ee2920822214e901164defff08e252cb8b10b199eee4bde9be8b25a3e9aada4a1fcad61b801_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['check_id']+issue['file_abs_path']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/checkov_import.py", "start": {"col": 38, "line": 134, "offset": 4395}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 99, "line": 163, "offset": 5410}, "extra": {"fingerprint": "d64ba307e4b6f576bfa38e9e6517e823309aa1de5655791163a79cd9a189d3205b266aab6c9af2ad88b62e32d9c3c50dc72518ea26edf2b2f689eea01877605d_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['mergeKey'] + issue['strippedMainEventFilePathname'] +\n                                                     str(issue['mainEventLineNumber']) +\n                                                     str(issue['occurrenceNumberInMK'])).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/coverity_import.py", "start": {"col": 38, "line": 161, "offset": 5146}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 99, "line": 196, "offset": 6848}, "extra": {"fingerprint": "d64ba307e4b6f576bfa38e9e6517e823309aa1de5655791163a79cd9a189d3205b266aab6c9af2ad88b62e32d9c3c50dc72518ea26edf2b2f689eea01877605d_1", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    print(hashlib.md5(str(issue['mergeKey'] + issue['strippedMainEventFilePathname'] +\n                                                     str(issue['mainEventLineNumber']) +\n                                                     str(issue['occurrenceNumberInMK'])).encode()).hexdigest())", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/coverity_import.py", "start": {"col": 11, "line": 194, "offset": 6584}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 55, "line": 210, "offset": 7374}, "extra": {"fingerprint": "d64ba307e4b6f576bfa38e9e6517e823309aa1de5655791163a79cd9a189d3205b266aab6c9af2ad88b62e32d9c3c50dc72518ea26edf2b2f689eea01877605d_2", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    print(hashlib.md5(str(issue['mergeKey']).encode()).hexdigest())", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/coverity_import.py", "start": {"col": 11, "line": 210, "offset": 7330}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 76, "line": 135, "offset": 4492}, "extra": {"fingerprint": "1d9f7d084dac4b73085c2d44034db81f552e9013899135fc97720e63cfcfb6173267fbc15bc45ba721e64a8727bb4c29a9b3457c02d8105a78288c6358b42640_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['id']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/gitlab_scans_import.py", "start": {"col": 38, "line": 135, "offset": 4454}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 49, "line": 168, "offset": 5786}, "extra": {"fingerprint": "1d9f7d084dac4b73085c2d44034db81f552e9013899135fc97720e63cfcfb6173267fbc15bc45ba721e64a8727bb4c29a9b3457c02d8105a78288c6358b42640_1", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    print(hashlib.md5(str(issue['id']).encode()).hexdigest())", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/gitlab_scans_import.py", "start": {"col": 11, "line": 168, "offset": 5748}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 92, "line": 160, "offset": 5141}, "extra": {"fingerprint": "3441929b7dee4c62e32f555f3ebb360fb7001b062072203c6bbb9a9f4200f4e828f025e52dbf5004140e0733c658b8151020ca0ff5b79921a2c07585a2086ec6_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(issue.find('asoc-issue-id').text.encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/hclscan_import.py", "start": {"col": 38, "line": 160, "offset": 5087}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 56, "line": 139, "offset": 4639}, "extra": {"fingerprint": "357fcf21907f088a878a693774f2616525f35c4d7e55076fe238c244d38a25e13f5513608ff4a164b5d70d393eda27663a4ab97b31683745eb5b705e3fa775f3_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    print(hashlib.md5(get_id(issue, location).encode()).hexdigest())", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/owaspzap_import.py", "start": {"col": 11, "line": 139, "offset": 4594}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 83, "line": 173, "offset": 5620}, "extra": {"fingerprint": "357fcf21907f088a878a693774f2616525f35c4d7e55076fe238c244d38a25e13f5513608ff4a164b5d70d393eda27663a4ab97b31683745eb5b705e3fa775f3_1", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(get_id(issue, location).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/owaspzap_import.py", "start": {"col": 38, "line": 173, "offset": 5575}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 90, "line": 129, "offset": 4249}, "extra": {"fingerprint": "8d20b7899d9631ef4ac6070a2e5a260c4423d69015bb3358c93d7aea3a1253c41ee6aa8464f1786b4372a49a040f3c935a28dfd9d8ba0bd5cbcfac796704278c_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['vulnerability_id']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/safety_import.py", "start": {"col": 38, "line": 129, "offset": 4197}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 140, "line": 129, "offset": 4253}, "extra": {"fingerprint": "e3a87e12acff8023421f89c29c696e68194844736e64c6bf9a0c3444571b236afb0c0accd33dc1042ff5bd197ed0a9a01303cb8a39ac9f36d556160687a2be53_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['extra']['fingerprint'] + issue['path'] + str(issue['start']['line'])).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/semgrep_import.py", "start": {"col": 38, "line": 129, "offset": 4151}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 113, "line": 171, "offset": 5697}, "extra": {"fingerprint": "e3a87e12acff8023421f89c29c696e68194844736e64c6bf9a0c3444571b236afb0c0accd33dc1042ff5bd197ed0a9a01303cb8a39ac9f36d556160687a2be53_1", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    print(hashlib.md5(str(issue['extra']['fingerprint'] + issue['path'] + str(issue['start']['line'])).encode()).hexdigest())", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/semgrep_import.py", "start": {"col": 11, "line": 171, "offset": 5595}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 77, "line": 187, "offset": 7361}, "extra": {"fingerprint": "f5a533a7c67a86290ee00b226b4fd21c3416a985cedfc0d02ad9f4d0e19ac6612533051738433aae0c4f1d5ea5cde843f174a4fdb89de7e074f7afab8d323687_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['key']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "semgrep.dev": {"rule": {"rule_id": "wdUJ2Y", "url": "https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "version_id": "nWTPy6"}}, "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "src/connectors/endpoints/sonarqube_extractor.py", "start": {"col": 38, "line": 187, "offset": 7322}}, {"check_id": "python.lang.security.use-defused-xml.use-defused-xml", "end": {"col": 35, "line": 13, "offset": 456}, "extra": {"fingerprint": "fd515899ea83295b5edbdded1dd02143f3b61da51371ce1a36f85f484f42adad5d445442a4638dfb7969f62e44dbcb46acd8d11584fa5cb28f4e5e5567d0c7cd_0", "is_ignored": false, "lines": "import xml.etree.ElementTree as ET  # It must be replaced due to possible XXE attacks", "message": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "references": ["https://docs.python.org/3/library/xml.html", "https://github.com/tiran/defusedxml", "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"], "semgrep.dev": {"rule": {"rule_id": "d8UjRx", "url": "https://semgrep.dev/playground/r/nWTwqD/python.lang.security.use-defused-xml.use-defused-xml", "version_id": "nWTwqD"}}, "shortlink": "https://sg.run/kX47", "source": "https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml", "subcategory": ["vuln"], "technology": ["python"]}, "metavars": {}, "severity": "ERROR"}, "path": "src/connectors/endpoints/owaspzap_import.py", "start": {"col": 1, "line": 13, "offset": 422}}], "version": "1.4.0"}

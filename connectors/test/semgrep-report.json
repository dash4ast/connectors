{"errors": [], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": ["connectors/.idea/.gitignore", "connectors/.idea/connectors.iml", "connectors/.idea/inspectionProfiles/Project_Default.xml", "connectors/.idea/inspectionProfiles/profiles_settings.xml", "connectors/.idea/misc.xml", "connectors/.idea/modules.xml", "connectors/.idea/synopsys_code_sight_state.xml", "connectors/.idea/vcs.xml", "connectors/Dockerfile", "connectors/setup.py", "connectors/src/connectors/__main__.py", "connectors/src/connectors/app.py", "connectors/src/connectors/db/MariaDbClient.py", "connectors/src/connectors/db/PostgreDbClient.py", "connectors/src/connectors/db/__init__.py", "connectors/src/connectors/db/__pycache__/PostgreDbClient.cpython-38.pyc", "connectors/src/connectors/db/__pycache__/__init__.cpython-38.pyc", "connectors/src/connectors/endpoints/__init__.py", "connectors/src/connectors/endpoints/bandit_json_import.py", "connectors/src/connectors/endpoints/blackduck_extractor.py", "connectors/src/connectors/endpoints/checkov_json_import.py", "connectors/src/connectors/endpoints/coverity_json_import.py", "connectors/src/connectors/endpoints/health.py", "connectors/src/connectors/endpoints/owaspzap_xml_import.py", "connectors/src/connectors/endpoints/safety_json_import.py", "connectors/src/connectors/endpoints/sonarqube_extractor.py", "connectors/src/connectors/persistence/Application.py", "connectors/src/connectors/persistence/Base.py", "connectors/src/connectors/persistence/Vulnerability.py", "connectors/src/connectors/persistence/__init__.py", "connectors/src/connectors/persistence/__pycache__/Application.cpython-38.pyc", "connectors/src/connectors/persistence/__pycache__/Base.cpython-38.pyc", "connectors/src/connectors/persistence/__pycache__/Vulnerability.cpython-38.pyc", "connectors/src/connectors/persistence/__pycache__/__init__.cpython-38.pyc", "connectors/src/connectors.egg-info/PKG-INFO", "connectors/src/connectors.egg-info/SOURCES.txt", "connectors/src/connectors.egg-info/dependency_links.txt", "connectors/src/connectors.egg-info/requires.txt", "connectors/src/connectors.egg-info/top_level.txt"]}, "results": [{"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 125, "line": 125, "offset": 4109}, "extra": {"fingerprint": "fd3dc5f6b38f793de60ce3b269fd7a62e5988ceb43438c3e25d9ad5ab7ed60921e0ee87dcbb07f0d2507efb84e52d25dddc878319a6fb8a985bf0c123eea1c4b_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['test_id']+issue['filename']+str(issue['line_number'])).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/bandit_json_import.py", "start": {"col": 38, "line": 125, "offset": 4022}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 95, "line": 200, "offset": 8566}, "extra": {"fingerprint": "09ae6744a729e7c525744d3bc09095f3dc6752bd2d96c8d7be7e2089ad67662eb95600c695f79baf5f09f8583e435aee79995a44018b1167e4dd46bd1b025c4d_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    key = hashlib.md5(\n        str(issue_name + component_name + component_version_name + application_name).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/blackduck_extractor.py", "start": {"col": 11, "line": 199, "offset": 8459}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 105, "line": 128, "offset": 4284}, "extra": {"fingerprint": "49c254af86170ff8397d6d6fd26f847ae4a2babdf646cf09bb3ccc0766fcc5836abc2fc3b5f9ff9e1a8e57ebb467f7d754fecbc4bcd387f3ffe8fb568e6c30ef_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['check_id']+issue['file_abs_path']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/checkov_json_import.py", "start": {"col": 38, "line": 128, "offset": 4217}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 82, "line": 125, "offset": 4078}, "extra": {"fingerprint": "3ef1d92de57fd0c9845ffaa06df8f04be494012cc50427a3f37ea70e8fefd6dde8e6c1a3c64ad6b8537e64e37cc03fc14362975f9b49d56817533d4478de0ed7_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['mergeKey']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/coverity_json_import.py", "start": {"col": 38, "line": 125, "offset": 4034}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 55, "line": 159, "offset": 5358}, "extra": {"fingerprint": "3ef1d92de57fd0c9845ffaa06df8f04be494012cc50427a3f37ea70e8fefd6dde8e6c1a3c64ad6b8537e64e37cc03fc14362975f9b49d56817533d4478de0ed7_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    print(hashlib.md5(str(issue['mergeKey']).encode()).hexdigest())", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/coverity_json_import.py", "start": {"col": 11, "line": 159, "offset": 5314}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 55, "line": 173, "offset": 5884}, "extra": {"fingerprint": "3ef1d92de57fd0c9845ffaa06df8f04be494012cc50427a3f37ea70e8fefd6dde8e6c1a3c64ad6b8537e64e37cc03fc14362975f9b49d56817533d4478de0ed7_1", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    print(hashlib.md5(str(issue['mergeKey']).encode()).hexdigest())", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/coverity_json_import.py", "start": {"col": 11, "line": 173, "offset": 5840}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 125, "line": 126, "offset": 4165}, "extra": {"fingerprint": "4942dd627727287ecace9c3b4c860e85ea5032d9b611ce7afea85a942dde9b9013beb20216669993a6ab9812f8c174eb7a72c60b1a7069551ad5703c7231a714_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['test_id']+issue['filename']+str(issue['line_number'])).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/owaspzap_xml_import.py", "start": {"col": 38, "line": 126, "offset": 4078}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 90, "line": 124, "offset": 4072}, "extra": {"fingerprint": "7a53be981d9f89861be4b1dbd3cb40fc707e470bcec4d27a43627006a9f716fb43340d846a91028c558205641bc5e6b5d56f7404140382b573e25a90e986d574_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['vulnerability_id']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/safety_json_import.py", "start": {"col": 38, "line": 124, "offset": 4020}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 77, "line": 193, "offset": 7453}, "extra": {"fingerprint": "cf4a2899daa5fe4adbcb33895953af4d8ac4928a7370f3ec7fb9725126393e122b01c175b3c25a50373b264bb4de24b069ccbbfca0a059459b927979c8b8f307_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "    vulnerability.vulnerability_id = hashlib.md5(str(issue['key']).encode()).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "connectors/src/connectors/endpoints/sonarqube_extractor.py", "start": {"col": 38, "line": 193, "offset": 7414}}, {"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 43, "line": 9, "offset": 176}, "extra": {"fingerprint": "180db1bda5a7cc29b7a8b71dfc86d6d78547c52de63e1e349d40137a8bd01fa0a9f3d3034fa0322687dbb71f8f65fddef01d9554fa8f6082f951c64717735eec_0", "is_ignored": false, "lines": "ENTRYPOINT [\"python3\", \"-m\", \"connectors\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "technology": ["dockerfile"]}, "metavars": {}, "severity": "ERROR"}, "path": "connectors/Dockerfile", "start": {"col": 1, "line": 9, "offset": 134}}], "version": "0.104.0"}

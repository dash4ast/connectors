<?xml version="1.0"?>
<OWASPZAPReport version="2.11.1" generated="Fri, 7 Oct 2022 13:55:18">
	
		<site name="http://demo.owasp-juice.shop" host="demo.owasp-juice.shop" port="80" ssl="false">
			<alerts>
				
					<alertitem>
						<pluginid>10038</pluginid>
						<alertRef>10038</alertRef>
						<alert>Content Security Policy (CSP) Header Not Set</alert>
						<name>Content Security Policy (CSP) Header Not Set</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page &#x2014; covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://demo.owasp-juice.shop/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/ftp</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: &quot;Content-Security-Policy&quot; for Chrome 25+, Firefox 23+ and Safari 7+, &quot;X-Content-Security-Policy&quot; for Firefox 4.0+ and Internet Explorer 10+, and &quot;X-WebKit-CSP&quot; for Chrome 14+ and Safari 6+.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&lt;/p&gt;&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;http://www.w3.org/TR/CSP/&lt;/p&gt;&lt;p&gt;http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html&lt;/p&gt;&lt;p&gt;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&lt;/p&gt;&lt;p&gt;http://caniuse.com/#feat=contentsecuritypolicy&lt;/p&gt;&lt;p&gt;http://content-security-policy.com/&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10098</pluginid>
						<alertRef>10098</alertRef>
						<alert>Cross-Domain Misconfiguration</alert>
						<name>Cross-Domain Misconfiguration</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://demo.owasp-juice.shop/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/assets/public/favicon_js.ico</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/polyfills.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/robots.txt</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/runtime.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/styles.css</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>Access-Control-Allow-Origin: *</evidence>
								</instance>
							
						</instances>
						<count>9</count>
						<solution>&lt;p&gt;Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).&lt;/p&gt;&lt;p&gt;Configure the &quot;Access-Control-Allow-Origin&quot; HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy&lt;/p&gt;</reference>
						<cweid>264</cweid>
						<wascid>14</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10017</pluginid>
						<alertRef>10017</alertRef>
						<alert>Cross-Domain JavaScript Source File Inclusion</alert>
						<name>Cross-Domain JavaScript Source File Inclusion</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The page includes one or more script files from a third-party domain.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://demo.owasp-juice.shop/</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt;</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/sitemap.xml</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/sitemap.xml</uri>
									<method>GET</method>
									<param>//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js</param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt;</evidence>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;Ensure JavaScript source files are loaded from only trusted sources, and the sources can&apos;t be controlled by end users of the application.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference></reference>
						<cweid>829</cweid>
						<wascid>15</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10096</pluginid>
						<alertRef>10096</alertRef>
						<alert>Timestamp Disclosure - Unix</alert>
						<name>Timestamp Disclosure - Unix</name>
						<riskcode>1</riskcode>
						<confidence>1</confidence>
						<riskdesc>Low (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;A timestamp was disclosed by the application/web server - Unix&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://demo.owasp-juice.shop/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>1734944650</evidence>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;1734944650, which evaluates to: 2024-12-23 09:04:10&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;http://projects.webappsec.org/w/page/13246936/Information%20Leakage&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>23</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10027</pluginid>
						<alertRef>10027</alertRef>
						<alert>Information Disclosure - Suspicious Comments</alert>
						<name>Information Disclosure - Suspicious Comments</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://demo.owasp-juice.shop/main.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>query</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/vendor.js</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>query</evidence>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;The following pattern was used: \bQUERY\b and was detected in the element starting with: &quot;&quot;use strict&quot;;(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[179],{902:(at,Bt,d)=&gt;{var J=d(2313),t=d(5e3),k=d(5&quot;, see evidence field for the suspicious comment/snippet.&lt;/p&gt;</otherinfo>
						<reference></reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>23</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10109</pluginid>
						<alertRef>10109</alertRef>
						<alert>Modern Web Application</alert>
						<name>Modern Web Application</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://demo.owasp-juice.shop/</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
								</instance>
							
							
								<instance>
									<uri>http://demo.owasp-juice.shop/sitemap.xml</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js&quot;&gt;&lt;/script&gt;</evidence>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;This is an informational alert and so no changes are required.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;No links have been found while there are scripts, which is an indication that this is a modern web application.&lt;/p&gt;</otherinfo>
						<reference></reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>1</sourceid>
					</alertitem>
				
			</alerts>
		</site>
	
</OWASPZAPReport>
{"errors": [{"code": 2, "level": "warn", "message": "Timeout when running typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method on Vulnerable-Flask-App/app/static/loader.js:\n ", "path": "Vulnerable-Flask-App/app/static/loader.js", "rule_id": "typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method", "type": "Timeout"}], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": ["Vulnerable-Flask-App/.github/workflows/zap_test.yml", "Vulnerable-Flask-App/.gitignore", "Vulnerable-Flask-App/.python-version", "Vulnerable-Flask-App/.vscode/settings.json", "Vulnerable-Flask-App/Dockerfile", "Vulnerable-Flask-App/README.md", "Vulnerable-Flask-App/app/Files/test.txt", "Vulnerable-Flask-App/app/__init__.py", "Vulnerable-Flask-App/app/app.py", "Vulnerable-Flask-App/app/requirements.txt", "Vulnerable-Flask-App/app/static/loader.js", "Vulnerable-Flask-App/app/templates/index.html", "Vulnerable-Flask-App/app/templates/layout.html", "Vulnerable-Flask-App/app/templates/test.html", "Vulnerable-Flask-App/app/templates/view.html", "Vulnerable-Flask-App/app/templates/yaml_test.html", "Vulnerable-Flask-App/app/test.db", "Vulnerable-Flask-App/old-workflows/semgrep.yml"]}, "results": [{"check_id": "javascript.browser.security.eval-detected.eval-detected", "end": {"col": 445, "line": 24, "offset": 10479}, "extra": {"fingerprint": "4bf4118e0440c7dad3541db74660fd876cc6c4247ca93da5ef42d39ddadc6e24a850a511518d445eae418c9e3ec253f66223a4c184c32990a3e50b4f64307f68_0", "is_ignored": false, "lines": "K.Tl=function(b){return\"(function(){\"+b+\"\\n;})();\\n\"};K.fs=function(b){var c=K.na;try{K.na={Wd:void 0,ld:!1};if(K.za(b))var d=b.call(void 0,{});else if(K.L(b))K.Ml()&&(b=K.Tl(b)),d=K.Ck.call(void 0,b);else throw Error(\"Invalid module definition\");var e=K.na.Wd;if(!K.L(e)||!e)throw Error('Invalid module name \"'+e+'\"');K.na.ld?K.tf(e,d):K.vi&&Object.seal&&typeof d==y&&null!=d&&Object.seal(d);K.Fk[e]=d}finally{K.na=c}};K.Ck=function(b){eval(b);return{}};", "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "metadata": {"asvs": {"control_id": "5.2.4 Dynamic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing", "section": "V5 Validation, Sanitization and Encoding", "version": "4"}, "category": "security", "confidence": "LOW", "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "shortlink": "https://sg.run/7ope", "source": "https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected", "subcategory": ["audit"], "technology": ["browser"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 438, "line": 24, "offset": 10472}}, {"check_id": "javascript.browser.security.eval-detected.eval-detected", "end": {"col": 131, "line": 26, "offset": 10984}, "extra": {"fingerprint": "4bf4118e0440c7dad3541db74660fd876cc6c4247ca93da5ef42d39ddadc6e24a850a511518d445eae418c9e3ec253f66223a4c184c32990a3e50b4f64307f68_1", "is_ignored": false, "lines": "K.Rt=function(b,c){var d=K.global.$jscomp;d||(K.global.$jscomp=d={});var e=d.je;if(!e){var f=K.La+K.Bi,g=K.zk(f);if(g){eval(g+a+f);if(K.global.$gwtExport&&K.global.$gwtExport.$jscomp&&!K.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the \"transpile\" method. $gwtExport: '+JSON.stringify(K.global.$gwtExport));K.global.$jscomp.je=K.global.$gwtExport.$jscomp.transpile;d=K.global.$jscomp;e=d.je}}if(!e){var h=\" requires transpilation but no transpiler was found.\";", "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "metadata": {"asvs": {"control_id": "5.2.4 Dynamic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing", "section": "V5 Validation, Sanitization and Encoding", "version": "4"}, "category": "security", "confidence": "LOW", "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "shortlink": "https://sg.run/7ope", "source": "https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected", "subcategory": ["audit"], "technology": ["browser"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 120, "line": 26, "offset": 10973}}, {"check_id": "javascript.browser.security.eval-detected.eval-detected", "end": {"col": 98, "line": 41, "offset": 16724}, "extra": {"fingerprint": "4bf4118e0440c7dad3541db74660fd876cc6c4247ca93da5ef42d39ddadc6e24a850a511518d445eae418c9e3ec253f66223a4c184c32990a3e50b4f64307f68_2", "is_ignored": false, "lines": "K.gj=function(){function b(b,c){e?d[b]=!0:c()?d[b]=!1:e=d[b]=!0}function c(b){try{return!!eval(b)}catch(h){return!1}}var d={es3:!1},e=!1,f=K.global.navigator&&K.global.navigator.userAgent?K.global.navigator.userAgent:\"\";b(\"es5\",function(){return c(\"[1,].length==1\")});b(\"es6\",function(){var b=f.match(/Edge\\/(\\d+)(\\.\\d)*/i);return b&&15>Number(b[1])?!1:c('(()=>{\"use strict\";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});", "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "metadata": {"asvs": {"control_id": "5.2.4 Dynamic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing", "section": "V5 Validation, Sanitization and Encoding", "version": "4"}, "category": "security", "confidence": "LOW", "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "shortlink": "https://sg.run/7ope", "source": "https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected", "subcategory": ["audit"], "technology": ["browser"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 91, "line": 41, "offset": 16717}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 748, "line": 153, "offset": 75184}, "extra": {"fingerprint": "d36dcbb3c01a858532a6a76dfd73cd87a55690e78103761bfe6d71ad79da944dd42b8d62ce5e2051312ce54e904b805f31a79a729b040182ad22ad7dbde95662_0", "is_ignored": false, "lines": "K.b.l.kc=function(b,c,d){var e={},f;for(f in b)e[f]=b[f];for(f in c)e[f]=c[f];for(f in d){var g=f.toLowerCase();if(g in b)throw Error('Cannot override \"'+g+'\" attribute, got \"'+f+'\" with value \"'+d[f]+'\"');g in c&&delete e[g];e[f]=d[f]}return e};K.b.l.Tm=K.b.l.pa(\"<!DOCTYPE html>\",K.h.i.O.sa);K.b.l.EMPTY=K.b.l.pa(\"\",K.h.i.O.sa);K.b.l.ze=K.b.l.pa(\"<br>\",K.h.i.O.sa);K.a.S={};K.a.S.Ln={bm:\"afterbegin\",cm:\"afterend\",rm:\"beforebegin\",sm:\"beforeend\"};K.a.S.ur=function(b,c,d){b.insertAdjacentHTML(c,K.b.l.u(d))};K.a.S.wi={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};K.a.S.oh=function(b,c){if(K.m.oa&&K.a.S.wi[b.tagName.toUpperCase()])throw Error(\"goog.dom.safe.setInnerHtml cannot be used to set content of \"+b.tagName+\".\");b.innerHTML=K.b.l.u(c)};K.a.S.tt=function(b,c){b.outerHTML=K.b.l.u(c)};K.a.S.wt=function(b,c){b.style.cssText=K.b.F.u(c)};K.a.S.yq=function(b,c){b.write(K.b.l.u(c))};", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"]}, "metavars": {"$EL": {"abstract_content": "b", "end": {"col": 727, "line": 153, "offset": 75163}, "start": {"col": 726, "line": 153, "offset": 75162}}, "$HTML": {"abstract_content": "K.b.l.u(c)", "end": {"col": 748, "line": 153, "offset": 75184}, "start": {"col": 738, "line": 153, "offset": 75174}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 726, "line": 153, "offset": 75162}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 795, "line": 153, "offset": 75231}, "extra": {"fingerprint": "d36dcbb3c01a858532a6a76dfd73cd87a55690e78103761bfe6d71ad79da944dd42b8d62ce5e2051312ce54e904b805f31a79a729b040182ad22ad7dbde95662_1", "is_ignored": false, "lines": "K.b.l.kc=function(b,c,d){var e={},f;for(f in b)e[f]=b[f];for(f in c)e[f]=c[f];for(f in d){var g=f.toLowerCase();if(g in b)throw Error('Cannot override \"'+g+'\" attribute, got \"'+f+'\" with value \"'+d[f]+'\"');g in c&&delete e[g];e[f]=d[f]}return e};K.b.l.Tm=K.b.l.pa(\"<!DOCTYPE html>\",K.h.i.O.sa);K.b.l.EMPTY=K.b.l.pa(\"\",K.h.i.O.sa);K.b.l.ze=K.b.l.pa(\"<br>\",K.h.i.O.sa);K.a.S={};K.a.S.Ln={bm:\"afterbegin\",cm:\"afterend\",rm:\"beforebegin\",sm:\"beforeend\"};K.a.S.ur=function(b,c,d){b.insertAdjacentHTML(c,K.b.l.u(d))};K.a.S.wi={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};K.a.S.oh=function(b,c){if(K.m.oa&&K.a.S.wi[b.tagName.toUpperCase()])throw Error(\"goog.dom.safe.setInnerHtml cannot be used to set content of \"+b.tagName+\".\");b.innerHTML=K.b.l.u(c)};K.a.S.tt=function(b,c){b.outerHTML=K.b.l.u(c)};K.a.S.wt=function(b,c){b.style.cssText=K.b.F.u(c)};K.a.S.yq=function(b,c){b.write(K.b.l.u(c))};", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"]}, "metavars": {"$EL": {"abstract_content": "b", "end": {"col": 774, "line": 153, "offset": 75210}, "start": {"col": 773, "line": 153, "offset": 75209}}, "$HTML": {"abstract_content": "K.b.l.u(c)", "end": {"col": 795, "line": 153, "offset": 75231}, "start": {"col": 785, "line": 153, "offset": 75221}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 773, "line": 153, "offset": 75209}}, {"check_id": "javascript.express.security.audit.xss.mustache.var-in-href.var-in-href", "end": {"col": 110, "line": 12, "offset": 389}, "extra": {"fingerprint": "b545ee95b9491cea2b7b7adc24c6282bb9fc883970af860084aaf3a3fb7c1938faf64cde28cbca1d4507fabbb171adedc9cd3450734d1d430c70ae630bf5e2dc_0", "is_ignored": false, "lines": "            <li><a href = \"{{ url[0] }}\">{{ url[0] }}</a> - {{ url[1] }} - Allowed Methods: {{ url[2] }}</li>", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI", "https://github.com/pugjs/pug/issues/2952"], "shortlink": "https://sg.run/8yOq", "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href", "subcategory": ["audit"], "technology": ["express"]}, "metavars": {"$1": {"abstract_content": "\"", "end": {"col": 28, "line": 12, "offset": 307}, "start": {"col": 27, "line": 12, "offset": 306}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/templates/index.html", "start": {"col": 17, "line": 12, "offset": 296}}, {"check_id": "python.django.security.injection.raw-html-format.raw-html-format", "end": {"col": 22, "line": 112, "offset": 3301}, "extra": {"dataflow_trace": {"taint_source": {"content": "request.url", "location": {"end": {"col": 22, "line": 112, "offset": 3301}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 11, "line": 112, "offset": 3290}}}}, "fingerprint": "5bb53587cb740a0903bcea486046f507639d08fcfa2d46d79d397e399a10e5526b26737a48613ee72f2d5f7410f9ed934eafe40d33513466904ce4652f7614c2_0", "is_ignored": false, "lines": "    template = '''<html>\n    <head>\n    <title>Error</title>\n    </head>\n    <body>\n    <h1>Oops that page doesn't exist!!</h1>\n    <h3>%s</h3>\n    </body>\n    </html>\n    ''' % request.url", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render", "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"], "shortlink": "https://sg.run/oYj1", "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format", "subcategory": ["vuln"], "technology": ["django"]}, "metavars": {"$ANYTHING": {"abstract_content": "url", "end": {"col": 22, "line": 112, "offset": 3301}, "start": {"col": 19, "line": 112, "offset": 3298}}, "$HTMLSTR": {"abstract_content": "<html>\n    <head>\n    <title>Error</title>\n    </head>\n    <body>\n    <h1>Oops that page doesn't exist!!</h1>\n    <h3>%s</h3>\n    </body>\n    </html>\n    ", "end": {"col": 5, "line": 112, "offset": 3284}, "start": {"col": 19, "line": 103, "offset": 3130}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 16, "line": 103, "offset": 3127}}, {"check_id": "python.flask.security.injection.raw-html-concat.raw-html-format", "end": {"col": 22, "line": 112, "offset": 3301}, "extra": {"dataflow_trace": {"taint_source": {"content": "request.url", "location": {"end": {"col": 22, "line": 112, "offset": 3301}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 11, "line": 112, "offset": 3290}}}}, "fingerprint": "60df5b3dd3c6f2768f898d529fc3eca2b22d6ab139af9c0513de38757dcee9ddb638860226b59518a052dfd000f8b34efebb0532ff90c549ccc781d6d5823794_0", "is_ignored": false, "lines": "    template = '''<html>\n    <head>\n    <title>Error</title>\n    </head>\n    <body>\n    <h1>Oops that page doesn't exist!!</h1>\n    <h3>%s</h3>\n    </body>\n    </html>\n    ''' % request.url", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/Pb7e", "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format", "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {"$ANYTHING": {"abstract_content": "url", "end": {"col": 22, "line": 112, "offset": 3301}, "start": {"col": 19, "line": 112, "offset": 3298}}, "$HTMLSTR": {"abstract_content": "<html>\n    <head>\n    <title>Error</title>\n    </head>\n    <body>\n    <h1>Oops that page doesn't exist!!</h1>\n    <h3>%s</h3>\n    </body>\n    </html>\n    ", "end": {"col": 5, "line": 112, "offset": 3284}, "start": {"col": 19, "line": 103, "offset": 3130}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 16, "line": 103, "offset": 3127}}, {"check_id": "python.django.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 124, "line": 261, "offset": 9461}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "content", "location": {"end": {"col": 20, "line": 255, "offset": 9161}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 13, "line": 255, "offset": 9154}}}, {"content": "search_term", "location": {"end": {"col": 32, "line": 259, "offset": 9278}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 21, "line": 259, "offset": 9267}}}], "taint_source": {"content": "request.json", "location": {"end": {"col": 35, "line": 255, "offset": 9176}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 23, "line": 255, "offset": 9164}}}}, "fingerprint": "85f8b176028cbc92903a654fca64a53b9896886712d37cdc64876b362fa4a7e9cd19cdaae8a017c291f6460aa7a971ae604a99f121c86f7c096fe43a3c5e8a51_0", "is_ignored": false, "lines": "                    str_query = \"SELECT first_name, last_name, username FROM customer WHERE username = '%s';\" % search_term", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "shortlink": "https://sg.run/PbZp", "source": "https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["audit"], "technology": ["django"]}, "metavars": {"$ANYTHING": {"abstract_content": "json", "end": {"col": 35, "line": 255, "offset": 9176}, "start": {"col": 31, "line": 255, "offset": 9172}}, "$SQLSTR": {"abstract_content": "SELECT first_name, last_name, username FROM customer WHERE username = '%s';", "end": {"col": 109, "line": 261, "offset": 9446}, "start": {"col": 34, "line": 261, "offset": 9371}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 33, "line": 261, "offset": 9370}}, {"check_id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 124, "line": 261, "offset": 9461}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "content", "location": {"end": {"col": 20, "line": 255, "offset": 9161}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 13, "line": 255, "offset": 9154}}}, {"content": "search_term", "location": {"end": {"col": 32, "line": 259, "offset": 9278}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 21, "line": 259, "offset": 9267}}}], "taint_source": {"content": "request.json", "location": {"end": {"col": 35, "line": 255, "offset": 9176}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 23, "line": 255, "offset": 9164}}}}, "fingerprint": "3d98dcd9449d61ec492174a4e6c81bf0044c12eaa1d06434796f7fe4ac3bf21e73dcabb6eff8d47a39f4333dd15444390bdcf3813b3d415c26f476e3b3dc1cc6_0", "is_ignored": false, "lines": "                    str_query = \"SELECT first_name, last_name, username FROM customer WHERE username = '%s';\" % search_term", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "shortlink": "https://sg.run/JxZj", "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["sqlalchemy", "flask"]}, "metavars": {"$ANYTHING": {"abstract_content": "json", "end": {"col": 35, "line": 255, "offset": 9176}, "start": {"col": 31, "line": 255, "offset": 9172}}, "$SQLSTR": {"abstract_content": "SELECT first_name, last_name, username FROM customer WHERE username = '%s';", "end": {"col": 109, "line": 261, "offset": 9446}, "start": {"col": 34, "line": 261, "offset": 9371}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 33, "line": 261, "offset": 9370}}, {"check_id": "python.lang.security.audit.md5-used-as-password.md5-used-as-password", "end": {"col": 58, "line": 141, "offset": 4341}, "extra": {"dataflow_trace": {"taint_source": {"content": "hashlib.md5", "location": {"end": {"col": 36, "line": 141, "offset": 4319}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 25, "line": 141, "offset": 4308}}}}, "fingerprint": "f3a0e2f3d3ebb18240ffc0655b804eea0f57c976ba6fb53741bb36b33e973fc132bb18e07fd24f6abb7db89009cea9e859a34dd33647aa2e8b3e45d3c606dbb0_0", "is_ignored": false, "lines": "            hash_pass = hashlib.md5(password).hexdigest()", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"], "shortlink": "https://sg.run/5DwD", "source": "https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password", "subcategory": ["vuln"], "technology": ["pycryptodome", "hashlib", "md5"]}, "metavars": {"$FUNCTION": {"abstract_content": "hashlib.md5(password).hexdigest", "end": {"col": 56, "line": 141, "offset": 4339}, "start": {"col": 25, "line": 141, "offset": 4308}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 25, "line": 141, "offset": 4308}}, {"check_id": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "end": {"col": 249, "line": 3, "offset": 1126}, "extra": {"fingerprint": "361dd1c3a5289c6f4bf1f20f9d32e1da3128ec6c7ac994b3b054f153322781dfa22577f8419c0eabf68d445979c61719fd2e576dd3fb8eb7254bcc7aadc38f36_0", "is_ignored": false, "lines": "J.Kj=function(b){return\"undefined\"!=typeof window&&window===b?b:\"undefined\"!=typeof global&&null!=global?global:b};J.global=J.Kj(this);J.Vk=function(b){if(b){for(var c=J.global,d=[\"Promise\"],e=0;e<d.length-1;e++){var f=d[e];f in c||(c[f]={});c=c[f]}d=d[d.length-1];e=c[d];b=b(e);b!=e&&null!=b&&J.defineProperty(c,d,{configurable:!0,writable:!0,value:b})}};", "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"], "shortlink": "https://sg.run/w1DB", "source": "https://semgrep.dev/r/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "subcategory": ["audit"], "technology": ["typescript"]}, "metavars": {"$A": {"abstract_content": "f", "end": {"col": 248, "line": 3, "offset": 1125}, "propagated_value": {"svalue_abstract_content": "d[e]", "svalue_end": {"col": 224, "line": 3, "offset": 1101}, "svalue_start": {"col": 220, "line": 3, "offset": 1097}}, "start": {"col": 247, "line": 3, "offset": 1124}}, "$SMTH": {"abstract_content": "c", "end": {"col": 244, "line": 3, "offset": 1121}, "start": {"col": 243, "line": 3, "offset": 1120}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 243, "line": 3, "offset": 1120}}, {"check_id": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "end": {"col": 449, "line": 106, "offset": 49856}, "extra": {"fingerprint": "88bf9b7a81dc4f62cac67c216ce2518b258ac1bd9ac8ff4020524aab6416c63a79b12bde01d58da2d52ead2c56e6949dfd18a0d8b13de76590f88e73b5b12fda_0", "is_ignored": false, "lines": "K.object.Xq=function(b){var c=0,d;for(d in b)c++;return c};K.object.Vq=function(b){for(var c in b)return c};K.object.Wq=function(b){for(var c in b)return b[c]};K.object.contains=function(b,c){return K.object.ej(b,c)};K.object.lr=function(b){var c=[],d=0,e;for(e in b)c[d++]=b[e];return c};K.object.Yf=function(b){var c=[],d=0,e;for(e in b)c[d++]=e;return c};K.object.kr=function(b,c){var d=K.Pb(c),e=d?c:arguments;for(d=d?0:1;d<e.length&&(b=b[e[d]],K.P(b));d++);return b};", "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"], "shortlink": "https://sg.run/w1DB", "source": "https://semgrep.dev/r/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "subcategory": ["audit"], "technology": ["typescript"]}, "metavars": {"$A": {"abstract_content": "e[d]", "end": {"col": 448, "line": 106, "offset": 49855}, "start": {"col": 444, "line": 106, "offset": 49851}}, "$SMTH": {"abstract_content": "b", "end": {"col": 441, "line": 106, "offset": 49848}, "start": {"col": 440, "line": 106, "offset": 49847}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 440, "line": 106, "offset": 49847}}, {"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 22, "line": 13, "offset": 187}, "extra": {"fingerprint": "b822a32c5f3379787f215af72d36ca8d50bffb13e7639a1075abc43290653195da3986137ec0886801dd25fb57c7afeaad5dcf7924636ddfeb42021a7485fe3c_0", "is_ignored": false, "lines": "ENTRYPOINT [\"python\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"]}, "metavars": {}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/Dockerfile", "start": {"col": 1, "line": 13, "offset": 166}}, {"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 15, "line": 15, "offset": 203}, "extra": {"fingerprint": "b822a32c5f3379787f215af72d36ca8d50bffb13e7639a1075abc43290653195da3986137ec0886801dd25fb57c7afeaad5dcf7924636ddfeb42021a7485fe3c_1", "is_ignored": false, "lines": "CMD [\"app.py\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"]}, "metavars": {}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/Dockerfile", "start": {"col": 1, "line": 15, "offset": 189}}, {"check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "end": {"col": 207, "line": 55, "offset": 23443}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "c", "location": {"end": {"col": 178, "line": 55, "offset": 23414}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 177, "line": 55, "offset": 23413}}}], "taint_source": {"content": "c", "location": {"end": {"col": 178, "line": 55, "offset": 23414}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 177, "line": 55, "offset": 23413}}}}, "fingerprint": "4506bc64aabc2fbe8f3ddfbc234c72d15ac88b9b9bbf8aa0f059d0c3c7d6d3639c804f1d85d90b2e58ff162f81f81574d5e738b412429044a376d0465e1df335_0", "is_ignored": false, "lines": "K.f.Cb=function(b,c,d){var e=b;0<=c&&c<b.length&&0<d&&(e=b.substr(0,c)+b.substr(c+d,b.length-c-d));return e};K.f.remove=function(b,c){return b.replace(c,\"\")};K.f.Ls=function(b,c){c=new RegExp(K.f.Zd(c),\"g\");return b.replace(c,\"\")};K.f.Rs=function(b,c,d){c=new RegExp(K.f.Zd(c),\"g\");return b.replace(c,d.replace(/\\$/g,\"$$$$\"))};K.f.Zd=function(b){return String(b).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,\"\\\\$1\").replace(/\\x08/g,\"\\\\x08\")};", "message": "RegExp() called with a `c` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-185: Incorrect Regular Expression"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "shortlink": "https://sg.run/gr65", "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js", "subcategory": ["vuln"], "technology": ["javascript"]}, "metavars": {"$ARG": {"abstract_content": "c", "end": {"col": 178, "line": 55, "offset": 23414}, "start": {"col": 177, "line": 55, "offset": 23413}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 182, "line": 55, "offset": 23418}}, {"check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "end": {"col": 282, "line": 55, "offset": 23518}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "c", "location": {"end": {"col": 251, "line": 55, "offset": 23487}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 250, "line": 55, "offset": 23486}}}], "taint_source": {"content": "c", "location": {"end": {"col": 251, "line": 55, "offset": 23487}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 250, "line": 55, "offset": 23486}}}}, "fingerprint": "4506bc64aabc2fbe8f3ddfbc234c72d15ac88b9b9bbf8aa0f059d0c3c7d6d3639c804f1d85d90b2e58ff162f81f81574d5e738b412429044a376d0465e1df335_1", "is_ignored": false, "lines": "K.f.Cb=function(b,c,d){var e=b;0<=c&&c<b.length&&0<d&&(e=b.substr(0,c)+b.substr(c+d,b.length-c-d));return e};K.f.remove=function(b,c){return b.replace(c,\"\")};K.f.Ls=function(b,c){c=new RegExp(K.f.Zd(c),\"g\");return b.replace(c,\"\")};K.f.Rs=function(b,c,d){c=new RegExp(K.f.Zd(c),\"g\");return b.replace(c,d.replace(/\\$/g,\"$$$$\"))};K.f.Zd=function(b){return String(b).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,\"\\\\$1\").replace(/\\x08/g,\"\\\\x08\")};", "message": "RegExp() called with a `c` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-185: Incorrect Regular Expression"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "shortlink": "https://sg.run/gr65", "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js", "subcategory": ["vuln"], "technology": ["javascript"]}, "metavars": {"$ARG": {"abstract_content": "c", "end": {"col": 251, "line": 55, "offset": 23487}, "start": {"col": 250, "line": 55, "offset": 23486}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 257, "line": 55, "offset": 23493}}, {"check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "end": {"col": 191, "line": 59, "offset": 25331}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "c", "location": {"end": {"col": 97, "line": 59, "offset": 25237}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 96, "line": 59, "offset": 25236}}}, {"content": "c", "location": {"end": {"col": 100, "line": 59, "offset": 25240}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 99, "line": 59, "offset": 25239}}}], "taint_source": {"content": "c", "location": {"end": {"col": 97, "line": 59, "offset": 25237}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 96, "line": 59, "offset": 25236}}}}, "fingerprint": "4506bc64aabc2fbe8f3ddfbc234c72d15ac88b9b9bbf8aa0f059d0c3c7d6d3639c804f1d85d90b2e58ff162f81f81574d5e738b412429044a376d0465e1df335_2", "is_ignored": false, "lines": "K.f.Pt=function(b){return String(b).replace(/([A-Z])/g,\"-$1\").toLowerCase()};K.f.Qt=function(b,c){c=K.L(c)?K.f.Zd(c):\"\\\\s\";return b.replace(new RegExp(\"(^\"+(c?\"|[\"+c+\"]+\":\"\")+\")([a-z])\",\"g\"),function(b,c,f){return c+f.toUpperCase()})};K.f.Tp=function(b){return String(b.charAt(0)).toUpperCase()+String(b.substr(1)).toLowerCase()};K.f.parseInt=function(b){isFinite(b)&&(b=String(b));return K.L(b)?/^\\s*-?0x/i.test(b)?parseInt(b,16):parseInt(b,10):NaN};", "message": "RegExp() called with a `c` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-185: Incorrect Regular Expression"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "shortlink": "https://sg.run/gr65", "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js", "subcategory": ["vuln"], "technology": ["javascript"]}, "metavars": {"$ARG": {"abstract_content": "c", "end": {"col": 97, "line": 59, "offset": 25237}, "start": {"col": 96, "line": 59, "offset": 25236}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/static/loader.js", "start": {"col": 141, "line": 59, "offset": 25281}}, {"check_id": "python.django.security.audit.xss.template-href-var.template-href-var", "end": {"col": 41, "line": 12, "offset": 320}, "extra": {"fingerprint": "0dd7f57a84ccb0341a6a4af5673f0e68d624a507492859fd7df85d08fd58d0e28ef681646ab2843fe0ddb0d2abb995a3f9b6f70a13a60f7ffd78f05efba29c05_0", "is_ignored": false, "lines": "            <li><a href = \"{{ url[0] }}\">{{ url[0] }}</a> - {{ url[1] }} - Allowed Methods: {{ url[2] }}</li>", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss", "https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url", "https://content-security-policy.com/"], "shortlink": "https://sg.run/4x25", "source": "https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var", "subcategory": ["audit"], "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/templates/index.html", "start": {"col": 20, "line": 12, "offset": 299}}, {"check_id": "python.flask.security.xss.audit.template-href-var.template-href-var", "end": {"col": 41, "line": 12, "offset": 320}, "extra": {"fingerprint": "bd9f8f9f5f0b4a8234629aa6c67bb4115c643d17c3fbd84d4f2a032c44ebd48610c1c6f049385843e55a1d9aeca5d5684e911877e813ffbc77276da994c80c4f_0", "is_ignored": false, "lines": "            <li><a href = \"{{ url[0] }}\">{{ url[0] }}</a> - {{ url[1] }} - Allowed Methods: {{ url[2] }}</li>", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss", "https://content-security-policy.com/"], "shortlink": "https://sg.run/Do7o", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-href-var.template-href-var", "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/templates/index.html", "start": {"col": 20, "line": 12, "offset": 299}}, {"check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query", "end": {"col": 64, "line": 265, "offset": 9719}, "extra": {"fingerprint": "0ef40a43c702c0b3506837feb14826e9cab25517168f68f14fb8ad2f6e362dc62e028f761b886d4bf90244d3ff72281a7f0d94ae27bab11644e9bf2891e0f7ed_0", "is_ignored": false, "lines": "                    search_query = db.engine.execute(str_query)", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "shortlink": "https://sg.run/EkWw", "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$DB": {"abstract_content": "db.engine", "end": {"col": 45, "line": 265, "offset": 9700}, "start": {"col": 36, "line": 265, "offset": 9691}}, "$SQL": {"abstract_content": "str_query", "end": {"col": 63, "line": 265, "offset": 9718}, "propagated_value": {"svalue_abstract_content": "\"SELECT first_name, last_name, username FROM customer WHERE username = '%s';\"%search_term", "svalue_end": {"col": 124, "line": 261, "offset": 9461}, "svalue_start": {"col": 33, "line": 261, "offset": 9370}}, "start": {"col": 54, "line": 265, "offset": 9709}}}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 36, "line": 265, "offset": 9691}}, {"check_id": "python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret", "end": {"col": 193, "line": 184, "offset": 6227}, "extra": {"fingerprint": "a6b1eaebc3ce75d26ea26fa91e5d47500d1863a0c890b1057fb05b28d2122413063f939557388bfad6f0d7e98437f03c80d38e9f8df4dfb3a4bf84a2a0ae3177_0", "is_ignored": false, "lines": "            auth_token = jwt.encode({'user': username, 'exp': get_exp_date(), 'nbf': datetime.datetime.utcnow(), 'iss': 'we45', 'iat': datetime.datetime.utcnow()}, app.config['SECRET_KEY_HMAC'], algorithm='HS256')", "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "shortlink": "https://sg.run/l2E9", "source": "https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret", "subcategory": ["vuln"], "technology": ["jwt"]}, "metavars": {"$SECRET": {"abstract_content": "app.config['SECRET_KEY_HMAC']", "end": {"col": 194, "line": 184, "offset": 6228}, "start": {"col": 165, "line": 184, "offset": 6199}}, "$X": {"abstract_content": "{'user'username'exp'get_exp_date()'nbf'datetime.datetime.utcnow()'iss''we45''iat'datetime.datetime.utcnow()}", "end": {"col": 163, "line": 184, "offset": 6197}, "start": {"col": 37, "line": 184, "offset": 6071}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 176, "line": 184, "offset": 6210}}, {"check_id": "python.jwt.security.unverified-jwt-decode.unverified-jwt-decode", "end": {"col": 48, "line": 97, "offset": 3040}, "extra": {"fingerprint": "513e925153865a5bc3a7e0b081a334e7578cae7f0f396946cf9636f34d46df32d035d9064f0ec81f7d61dd54552a3194aeff0a7e5619b3ec554d9415c659bcbf_0", "fix_regex": {"regex": "(verify\\s*=\\s*)False", "replacement": "\\1True"}, "is_ignored": false, "lines": "    decoded = jwt.decode(token, verify = False)", "message": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-287: Improper Authentication"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "references": ["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"], "shortlink": "https://sg.run/6nyB", "source": "https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode", "subcategory": ["audit"], "technology": ["jwt"]}, "metavars": {}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 15, "line": 97, "offset": 3007}}, {"check_id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "end": {"col": 46, "line": 141, "offset": 4329}, "extra": {"fingerprint": "d779ab62ffcbba55c6f3ad99c81a8a6472bfa74bdeaaada179e7c6793b99dd4454f491232b71cacfa8b88492447a9337e5d859f301f113a43cb3edce74109959_0", "fix_regex": {"regex": "md5", "replacement": "sha256"}, "is_ignored": false, "lines": "            hash_pass = hashlib.md5(password).hexdigest()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"asvs": {"control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "section": "V6 Stored Cryptography Verification Requirements", "version": "4"}, "bandit-code": "B303", "category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "shortlink": "https://sg.run/9odY", "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5", "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 25, "line": 141, "offset": 4308}}, {"check_id": "python.flask.security.insecure-deserialization.insecure-deserialization", "end": {"col": 29, "line": 329, "offset": 11793}, "extra": {"fingerprint": "150173c4fcd9e46d0b5d1dcb8940bb42ae3c7138286238c937d12eae4ceb03f64394c38f28aeb5934770a0c255417251bd4591fdac2541b57eafa04cd7ff21b9_0", "is_ignored": false, "lines": "        ydata = yaml.load(y)", "message": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.python.org/3/library/pickle.html"], "shortlink": "https://sg.run/N45z", "source": "https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization", "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$X": {"abstract_content": "yaml_hammer", "end": {"col": 16, "line": 316, "offset": 11366}, "start": {"col": 5, "line": 316, "offset": 11355}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 17, "line": 329, "offset": 11781}}, {"check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "end": {"col": 64, "line": 265, "offset": 9719}, "extra": {"fingerprint": "f9116eee5b45f2f4c94da76fa609b86bf6a20e1711dbc57c6e70fac741222dc6ad189dabdf9f23118295530f205e9a0f3ba7747aea3a0a1f67e15fa757f0917f_0", "is_ignored": false, "lines": "                    str_query = \"SELECT first_name, last_name, username FROM customer WHERE username = '%s';\" % search_term\n                    # mycust = Customer.query.filter_by(username = search_term).first()\n                    # return jsonify({'Customer': mycust.username, 'First Name': mycust.first_name}),200\n\n                    search_query = db.engine.execute(str_query)", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "shortlink": "https://sg.run/2b1L", "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "subcategory": ["audit"], "technology": ["sqlalchemy"]}, "metavars": {"$CONNECTION": {"abstract_content": "db.engine", "end": {"col": 45, "line": 265, "offset": 9700}, "start": {"col": 36, "line": 265, "offset": 9691}}, "$QUERY": {"abstract_content": "str_query", "end": {"col": 30, "line": 261, "offset": 9367}, "start": {"col": 21, "line": 261, "offset": 9358}}, "$SQL": {"abstract_content": "\"SELECT first_name, last_name, username FROM customer WHERE username = '%s';\"", "end": {"col": 110, "line": 261, "offset": 9447}, "start": {"col": 33, "line": 261, "offset": 9370}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 21, "line": 261, "offset": 9358}}, {"check_id": "python.flask.security.audit.render-template-string.render-template-string", "end": {"col": 85, "line": 114, "offset": 3387}, "extra": {"fingerprint": "7fe610e03d5e84608895cd208a373bec91e8183edf1c901c938c0fe477736868d5a8f57554e547825c4b57af0f66ddb2562d0caa5178d2a6cc65702f24d9c95a_0", "is_ignored": false, "lines": "    return render_template_string(template, dir = dir, help = help, locals = locals),404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"], "shortlink": "https://sg.run/8yjE", "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string", "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 12, "line": 114, "offset": 3314}}, {"check_id": "python.flask.security.audit.render-template-string.render-template-string", "end": {"col": 95, "line": 281, "offset": 10407}, "extra": {"fingerprint": "7fe610e03d5e84608895cd208a373bec91e8183edf1c901c938c0fe477736868d5a8f57554e547825c4b57af0f66ddb2562d0caa5178d2a6cc65702f24d9c95a_1", "is_ignored": false, "lines": "                    return render_template_string(template, dir=dir, help=help, locals=locals), 404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"], "shortlink": "https://sg.run/8yjE", "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string", "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {}, "severity": "WARNING"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 28, "line": 281, "offset": 10340}}, {"check_id": "python.flask.security.dangerous-template-string.dangerous-template-string", "end": {"col": 89, "line": 114, "offset": 3391}, "extra": {"fingerprint": "ef5f600e9200567a1017ed3abb5bf0e1bb0cb6b0892b26e0e75116963acc768eb3624213cebe243f7d775227cbc9cfdb536d5842b0582eb7024e9e264a0aa750_0", "is_ignored": false, "lines": "    template = '''<html>\n    <head>\n    <title>Error</title>\n    </head>\n    <body>\n    <h1>Oops that page doesn't exist!!</h1>\n    <h3>%s</h3>\n    </body>\n    </html>\n    ''' % request.url\n\n    return render_template_string(template, dir = dir, help = help, locals = locals),404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html", "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"], "shortlink": "https://sg.run/b79E", "source": "https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string", "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$S": {"abstract_content": "request.url", "end": {"col": 22, "line": 112, "offset": 3301}, "start": {"col": 11, "line": 112, "offset": 3290}}, "$V": {"abstract_content": "template", "end": {"col": 13, "line": 103, "offset": 3124}, "start": {"col": 5, "line": 103, "offset": 3116}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 5, "line": 103, "offset": 3116}}, {"check_id": "python.flask.security.dangerous-template-string.dangerous-template-string", "end": {"col": 100, "line": 281, "offset": 10412}, "extra": {"fingerprint": "82d111284c63267ff275c80342ec416b2b16f43d84e89d7a4965da24cacdf337b8aa96606ad51374bc15dc3f53d7a3c78cc319900808866e2536a0945452f2ad_0", "is_ignored": false, "lines": "                    template = '''<html>\n                        <head>\n                        <title>Error</title>\n                        </head>\n                        <body>\n                        <h1>Oops Error Occurred</h1>\n                        <h3>%s</h3>\n                        </body>\n                        </html>\n                        ''' % str(e)\n                    return render_template_string(template, dir=dir, help=help, locals=locals), 404", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html", "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"], "shortlink": "https://sg.run/b79E", "source": "https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string", "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$S": {"abstract_content": "str(e)", "end": {"col": 37, "line": 280, "offset": 10312}, "start": {"col": 31, "line": 280, "offset": 10306}}, "$V": {"abstract_content": "template", "end": {"col": 29, "line": 271, "offset": 9971}, "start": {"col": 21, "line": 271, "offset": 9963}}}, "severity": "ERROR"}, "path": "Vulnerable-Flask-App/app/app.py", "start": {"col": 21, "line": 271, "offset": 9963}}], "version": "0.115.0"}
